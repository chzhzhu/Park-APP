/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.oracle.hackson.webapp.Schema.avrotojava;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Equipment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -977339699757587181L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Equipment\",\"namespace\":\"com.oracle.hackson.webapp.Schema.avrotojava\",\"fields\":[{\"name\":\"EquId\",\"type\":\"long\"},{\"name\":\"alive\",\"type\":\"boolean\"},{\"name\":\"equStatus\",\"type\":\"string\"},{\"name\":\"ping\",\"type\":{\"type\":\"record\",\"name\":\"Ping\",\"fields\":[{\"name\":\"reset\",\"type\":\"boolean\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Equipment> ENCODER =
      new BinaryMessageEncoder<Equipment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Equipment> DECODER =
      new BinaryMessageDecoder<Equipment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Equipment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Equipment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Equipment>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Equipment to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Equipment from a ByteBuffer. */
  public static Equipment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long EquId;
  @Deprecated public boolean alive;
  @Deprecated public java.lang.CharSequence equStatus;
  @Deprecated public com.oracle.hackson.webapp.Schema.avrotojava.Ping ping;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Equipment() {}

  /**
   * All-args constructor.
   * @param EquId The new value for EquId
   * @param alive The new value for alive
   * @param equStatus The new value for equStatus
   * @param ping The new value for ping
   */
  public Equipment(java.lang.Long EquId, java.lang.Boolean alive, java.lang.CharSequence equStatus, com.oracle.hackson.webapp.Schema.avrotojava.Ping ping) {
    this.EquId = EquId;
    this.alive = alive;
    this.equStatus = equStatus;
    this.ping = ping;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EquId;
    case 1: return alive;
    case 2: return equStatus;
    case 3: return ping;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EquId = (java.lang.Long)value$; break;
    case 1: alive = (java.lang.Boolean)value$; break;
    case 2: equStatus = (java.lang.CharSequence)value$; break;
    case 3: ping = (com.oracle.hackson.webapp.Schema.avrotojava.Ping)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'EquId' field.
   * @return The value of the 'EquId' field.
   */
  public java.lang.Long getEquId() {
    return EquId;
  }

  /**
   * Sets the value of the 'EquId' field.
   * @param value the value to set.
   */
  public void setEquId(java.lang.Long value) {
    this.EquId = value;
  }

  /**
   * Gets the value of the 'alive' field.
   * @return The value of the 'alive' field.
   */
  public java.lang.Boolean getAlive() {
    return alive;
  }

  /**
   * Sets the value of the 'alive' field.
   * @param value the value to set.
   */
  public void setAlive(java.lang.Boolean value) {
    this.alive = value;
  }

  /**
   * Gets the value of the 'equStatus' field.
   * @return The value of the 'equStatus' field.
   */
  public java.lang.CharSequence getEquStatus() {
    return equStatus;
  }

  /**
   * Sets the value of the 'equStatus' field.
   * @param value the value to set.
   */
  public void setEquStatus(java.lang.CharSequence value) {
    this.equStatus = value;
  }

  /**
   * Gets the value of the 'ping' field.
   * @return The value of the 'ping' field.
   */
  public com.oracle.hackson.webapp.Schema.avrotojava.Ping getPing() {
    return ping;
  }

  /**
   * Sets the value of the 'ping' field.
   * @param value the value to set.
   */
  public void setPing(com.oracle.hackson.webapp.Schema.avrotojava.Ping value) {
    this.ping = value;
  }

  /**
   * Creates a new Equipment RecordBuilder.
   * @return A new Equipment RecordBuilder
   */
  public static com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder newBuilder() {
    return new com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder();
  }

  /**
   * Creates a new Equipment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Equipment RecordBuilder
   */
  public static com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder newBuilder(com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder other) {
    return new com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder(other);
  }

  /**
   * Creates a new Equipment RecordBuilder by copying an existing Equipment instance.
   * @param other The existing instance to copy.
   * @return A new Equipment RecordBuilder
   */
  public static com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder newBuilder(com.oracle.hackson.webapp.Schema.avrotojava.Equipment other) {
    return new com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder(other);
  }

  /**
   * RecordBuilder for Equipment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Equipment>
    implements org.apache.avro.data.RecordBuilder<Equipment> {

    private long EquId;
    private boolean alive;
    private java.lang.CharSequence equStatus;
    private com.oracle.hackson.webapp.Schema.avrotojava.Ping ping;
    private com.oracle.hackson.webapp.Schema.avrotojava.Ping.Builder pingBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EquId)) {
        this.EquId = data().deepCopy(fields()[0].schema(), other.EquId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alive)) {
        this.alive = data().deepCopy(fields()[1].schema(), other.alive);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.equStatus)) {
        this.equStatus = data().deepCopy(fields()[2].schema(), other.equStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ping)) {
        this.ping = data().deepCopy(fields()[3].schema(), other.ping);
        fieldSetFlags()[3] = true;
      }
      if (other.hasPingBuilder()) {
        this.pingBuilder = com.oracle.hackson.webapp.Schema.avrotojava.Ping.newBuilder(other.getPingBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Equipment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.oracle.hackson.webapp.Schema.avrotojava.Equipment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.EquId)) {
        this.EquId = data().deepCopy(fields()[0].schema(), other.EquId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alive)) {
        this.alive = data().deepCopy(fields()[1].schema(), other.alive);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.equStatus)) {
        this.equStatus = data().deepCopy(fields()[2].schema(), other.equStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ping)) {
        this.ping = data().deepCopy(fields()[3].schema(), other.ping);
        fieldSetFlags()[3] = true;
      }
      this.pingBuilder = null;
    }

    /**
      * Gets the value of the 'EquId' field.
      * @return The value.
      */
    public java.lang.Long getEquId() {
      return EquId;
    }

    /**
      * Sets the value of the 'EquId' field.
      * @param value The value of 'EquId'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder setEquId(long value) {
      validate(fields()[0], value);
      this.EquId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EquId' field has been set.
      * @return True if the 'EquId' field has been set, false otherwise.
      */
    public boolean hasEquId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'EquId' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder clearEquId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'alive' field.
      * @return The value.
      */
    public java.lang.Boolean getAlive() {
      return alive;
    }

    /**
      * Sets the value of the 'alive' field.
      * @param value The value of 'alive'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder setAlive(boolean value) {
      validate(fields()[1], value);
      this.alive = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'alive' field has been set.
      * @return True if the 'alive' field has been set, false otherwise.
      */
    public boolean hasAlive() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'alive' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder clearAlive() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'equStatus' field.
      * @return The value.
      */
    public java.lang.CharSequence getEquStatus() {
      return equStatus;
    }

    /**
      * Sets the value of the 'equStatus' field.
      * @param value The value of 'equStatus'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder setEquStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.equStatus = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'equStatus' field has been set.
      * @return True if the 'equStatus' field has been set, false otherwise.
      */
    public boolean hasEquStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'equStatus' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder clearEquStatus() {
      equStatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ping' field.
      * @return The value.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Ping getPing() {
      return ping;
    }

    /**
      * Sets the value of the 'ping' field.
      * @param value The value of 'ping'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder setPing(com.oracle.hackson.webapp.Schema.avrotojava.Ping value) {
      validate(fields()[3], value);
      this.pingBuilder = null;
      this.ping = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ping' field has been set.
      * @return True if the 'ping' field has been set, false otherwise.
      */
    public boolean hasPing() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'ping' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.oracle.hackson.webapp.Schema.avrotojava.Ping.Builder getPingBuilder() {
      if (pingBuilder == null) {
        if (hasPing()) {
          setPingBuilder(com.oracle.hackson.webapp.Schema.avrotojava.Ping.newBuilder(ping));
        } else {
          setPingBuilder(com.oracle.hackson.webapp.Schema.avrotojava.Ping.newBuilder());
        }
      }
      return pingBuilder;
    }

    /**
     * Sets the Builder instance for the 'ping' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder setPingBuilder(com.oracle.hackson.webapp.Schema.avrotojava.Ping.Builder value) {
      clearPing();
      pingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ping' field has an active Builder instance
     * @return True if the 'ping' field has an active Builder instance
     */
    public boolean hasPingBuilder() {
      return pingBuilder != null;
    }

    /**
      * Clears the value of the 'ping' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.Equipment.Builder clearPing() {
      ping = null;
      pingBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Equipment build() {
      try {
        Equipment record = new Equipment();
        record.EquId = fieldSetFlags()[0] ? this.EquId : (java.lang.Long) defaultValue(fields()[0]);
        record.alive = fieldSetFlags()[1] ? this.alive : (java.lang.Boolean) defaultValue(fields()[1]);
        record.equStatus = fieldSetFlags()[2] ? this.equStatus : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (pingBuilder != null) {
          record.ping = this.pingBuilder.build();
        } else {
          record.ping = fieldSetFlags()[3] ? this.ping : (com.oracle.hackson.webapp.Schema.avrotojava.Ping) defaultValue(fields()[3]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Equipment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Equipment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Equipment>
    READER$ = (org.apache.avro.io.DatumReader<Equipment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
