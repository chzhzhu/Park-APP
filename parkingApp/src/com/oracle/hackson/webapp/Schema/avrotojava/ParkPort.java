/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.oracle.hackson.webapp.Schema.avrotojava;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ParkPort extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6459153389739466714L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ParkPort\",\"namespace\":\"com.oracle.hackson.webapp.Schema.avrotojava\",\"fields\":[{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"parkPortId\",\"type\":\"int\"},{\"name\":\"equNum\",\"type\":\"int\"},{\"name\":\"unlockedEquId\",\"type\":\"int\"},{\"name\":\"lockedEquId\",\"type\":\"int\"},{\"name\":\"disabledEquId\",\"type\":\"int\"},{\"name\":\"equ\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Equipment\",\"fields\":[{\"name\":\"EquId\",\"type\":\"long\"},{\"name\":\"alive\",\"type\":\"boolean\"},{\"name\":\"equStatus\",\"type\":\"string\"},{\"name\":\"ping\",\"type\":{\"type\":\"record\",\"name\":\"Ping\",\"fields\":[{\"name\":\"reset\",\"type\":\"boolean\"}]}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ParkPort> ENCODER =
      new BinaryMessageEncoder<ParkPort>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ParkPort> DECODER =
      new BinaryMessageDecoder<ParkPort>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ParkPort> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ParkPort> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ParkPort>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ParkPort to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ParkPort from a ByteBuffer. */
  public static ParkPort fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double longitude;
  @Deprecated public double latitude;
  @Deprecated public int parkPortId;
  @Deprecated public int equNum;
  @Deprecated public int unlockedEquId;
  @Deprecated public int lockedEquId;
  @Deprecated public int disabledEquId;
  @Deprecated public java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> equ;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ParkPort() {}

  /**
   * All-args constructor.
   * @param longitude The new value for longitude
   * @param latitude The new value for latitude
   * @param parkPortId The new value for parkPortId
   * @param equNum The new value for equNum
   * @param unlockedEquId The new value for unlockedEquId
   * @param lockedEquId The new value for lockedEquId
   * @param disabledEquId The new value for disabledEquId
   * @param equ The new value for equ
   */
  public ParkPort(java.lang.Double longitude, java.lang.Double latitude, java.lang.Integer parkPortId, java.lang.Integer equNum, java.lang.Integer unlockedEquId, java.lang.Integer lockedEquId, java.lang.Integer disabledEquId, java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> equ) {
    this.longitude = longitude;
    this.latitude = latitude;
    this.parkPortId = parkPortId;
    this.equNum = equNum;
    this.unlockedEquId = unlockedEquId;
    this.lockedEquId = lockedEquId;
    this.disabledEquId = disabledEquId;
    this.equ = equ;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return longitude;
    case 1: return latitude;
    case 2: return parkPortId;
    case 3: return equNum;
    case 4: return unlockedEquId;
    case 5: return lockedEquId;
    case 6: return disabledEquId;
    case 7: return equ;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: longitude = (java.lang.Double)value$; break;
    case 1: latitude = (java.lang.Double)value$; break;
    case 2: parkPortId = (java.lang.Integer)value$; break;
    case 3: equNum = (java.lang.Integer)value$; break;
    case 4: unlockedEquId = (java.lang.Integer)value$; break;
    case 5: lockedEquId = (java.lang.Integer)value$; break;
    case 6: disabledEquId = (java.lang.Integer)value$; break;
    case 7: equ = (java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'parkPortId' field.
   * @return The value of the 'parkPortId' field.
   */
  public java.lang.Integer getParkPortId() {
    return parkPortId;
  }

  /**
   * Sets the value of the 'parkPortId' field.
   * @param value the value to set.
   */
  public void setParkPortId(java.lang.Integer value) {
    this.parkPortId = value;
  }

  /**
   * Gets the value of the 'equNum' field.
   * @return The value of the 'equNum' field.
   */
  public java.lang.Integer getEquNum() {
    return equNum;
  }

  /**
   * Sets the value of the 'equNum' field.
   * @param value the value to set.
   */
  public void setEquNum(java.lang.Integer value) {
    this.equNum = value;
  }

  /**
   * Gets the value of the 'unlockedEquId' field.
   * @return The value of the 'unlockedEquId' field.
   */
  public java.lang.Integer getUnlockedEquId() {
    return unlockedEquId;
  }

  /**
   * Sets the value of the 'unlockedEquId' field.
   * @param value the value to set.
   */
  public void setUnlockedEquId(java.lang.Integer value) {
    this.unlockedEquId = value;
  }

  /**
   * Gets the value of the 'lockedEquId' field.
   * @return The value of the 'lockedEquId' field.
   */
  public java.lang.Integer getLockedEquId() {
    return lockedEquId;
  }

  /**
   * Sets the value of the 'lockedEquId' field.
   * @param value the value to set.
   */
  public void setLockedEquId(java.lang.Integer value) {
    this.lockedEquId = value;
  }

  /**
   * Gets the value of the 'disabledEquId' field.
   * @return The value of the 'disabledEquId' field.
   */
  public java.lang.Integer getDisabledEquId() {
    return disabledEquId;
  }

  /**
   * Sets the value of the 'disabledEquId' field.
   * @param value the value to set.
   */
  public void setDisabledEquId(java.lang.Integer value) {
    this.disabledEquId = value;
  }

  /**
   * Gets the value of the 'equ' field.
   * @return The value of the 'equ' field.
   */
  public java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> getEqu() {
    return equ;
  }

  /**
   * Sets the value of the 'equ' field.
   * @param value the value to set.
   */
  public void setEqu(java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> value) {
    this.equ = value;
  }

  /**
   * Creates a new ParkPort RecordBuilder.
   * @return A new ParkPort RecordBuilder
   */
  public static com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder newBuilder() {
    return new com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder();
  }

  /**
   * Creates a new ParkPort RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ParkPort RecordBuilder
   */
  public static com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder newBuilder(com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder other) {
    return new com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder(other);
  }

  /**
   * Creates a new ParkPort RecordBuilder by copying an existing ParkPort instance.
   * @param other The existing instance to copy.
   * @return A new ParkPort RecordBuilder
   */
  public static com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder newBuilder(com.oracle.hackson.webapp.Schema.avrotojava.ParkPort other) {
    return new com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder(other);
  }

  /**
   * RecordBuilder for ParkPort instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ParkPort>
    implements org.apache.avro.data.RecordBuilder<ParkPort> {

    private double longitude;
    private double latitude;
    private int parkPortId;
    private int equNum;
    private int unlockedEquId;
    private int lockedEquId;
    private int disabledEquId;
    private java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> equ;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.longitude)) {
        this.longitude = data().deepCopy(fields()[0].schema(), other.longitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parkPortId)) {
        this.parkPortId = data().deepCopy(fields()[2].schema(), other.parkPortId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.equNum)) {
        this.equNum = data().deepCopy(fields()[3].schema(), other.equNum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.unlockedEquId)) {
        this.unlockedEquId = data().deepCopy(fields()[4].schema(), other.unlockedEquId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lockedEquId)) {
        this.lockedEquId = data().deepCopy(fields()[5].schema(), other.lockedEquId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.disabledEquId)) {
        this.disabledEquId = data().deepCopy(fields()[6].schema(), other.disabledEquId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.equ)) {
        this.equ = data().deepCopy(fields()[7].schema(), other.equ);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ParkPort instance
     * @param other The existing instance to copy.
     */
    private Builder(com.oracle.hackson.webapp.Schema.avrotojava.ParkPort other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.longitude)) {
        this.longitude = data().deepCopy(fields()[0].schema(), other.longitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parkPortId)) {
        this.parkPortId = data().deepCopy(fields()[2].schema(), other.parkPortId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.equNum)) {
        this.equNum = data().deepCopy(fields()[3].schema(), other.equNum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.unlockedEquId)) {
        this.unlockedEquId = data().deepCopy(fields()[4].schema(), other.unlockedEquId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lockedEquId)) {
        this.lockedEquId = data().deepCopy(fields()[5].schema(), other.lockedEquId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.disabledEquId)) {
        this.disabledEquId = data().deepCopy(fields()[6].schema(), other.disabledEquId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.equ)) {
        this.equ = data().deepCopy(fields()[7].schema(), other.equ);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setLongitude(double value) {
      validate(fields()[0], value);
      this.longitude = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearLongitude() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setLatitude(double value) {
      validate(fields()[1], value);
      this.latitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearLatitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'parkPortId' field.
      * @return The value.
      */
    public java.lang.Integer getParkPortId() {
      return parkPortId;
    }

    /**
      * Sets the value of the 'parkPortId' field.
      * @param value The value of 'parkPortId'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setParkPortId(int value) {
      validate(fields()[2], value);
      this.parkPortId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'parkPortId' field has been set.
      * @return True if the 'parkPortId' field has been set, false otherwise.
      */
    public boolean hasParkPortId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'parkPortId' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearParkPortId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'equNum' field.
      * @return The value.
      */
    public java.lang.Integer getEquNum() {
      return equNum;
    }

    /**
      * Sets the value of the 'equNum' field.
      * @param value The value of 'equNum'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setEquNum(int value) {
      validate(fields()[3], value);
      this.equNum = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'equNum' field has been set.
      * @return True if the 'equNum' field has been set, false otherwise.
      */
    public boolean hasEquNum() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'equNum' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearEquNum() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'unlockedEquId' field.
      * @return The value.
      */
    public java.lang.Integer getUnlockedEquId() {
      return unlockedEquId;
    }

    /**
      * Sets the value of the 'unlockedEquId' field.
      * @param value The value of 'unlockedEquId'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setUnlockedEquId(int value) {
      validate(fields()[4], value);
      this.unlockedEquId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'unlockedEquId' field has been set.
      * @return True if the 'unlockedEquId' field has been set, false otherwise.
      */
    public boolean hasUnlockedEquId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'unlockedEquId' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearUnlockedEquId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lockedEquId' field.
      * @return The value.
      */
    public java.lang.Integer getLockedEquId() {
      return lockedEquId;
    }

    /**
      * Sets the value of the 'lockedEquId' field.
      * @param value The value of 'lockedEquId'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setLockedEquId(int value) {
      validate(fields()[5], value);
      this.lockedEquId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lockedEquId' field has been set.
      * @return True if the 'lockedEquId' field has been set, false otherwise.
      */
    public boolean hasLockedEquId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lockedEquId' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearLockedEquId() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'disabledEquId' field.
      * @return The value.
      */
    public java.lang.Integer getDisabledEquId() {
      return disabledEquId;
    }

    /**
      * Sets the value of the 'disabledEquId' field.
      * @param value The value of 'disabledEquId'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setDisabledEquId(int value) {
      validate(fields()[6], value);
      this.disabledEquId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'disabledEquId' field has been set.
      * @return True if the 'disabledEquId' field has been set, false otherwise.
      */
    public boolean hasDisabledEquId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'disabledEquId' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearDisabledEquId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'equ' field.
      * @return The value.
      */
    public java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> getEqu() {
      return equ;
    }

    /**
      * Sets the value of the 'equ' field.
      * @param value The value of 'equ'.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder setEqu(java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment> value) {
      validate(fields()[7], value);
      this.equ = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'equ' field has been set.
      * @return True if the 'equ' field has been set, false otherwise.
      */
    public boolean hasEqu() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'equ' field.
      * @return This builder.
      */
    public com.oracle.hackson.webapp.Schema.avrotojava.ParkPort.Builder clearEqu() {
      equ = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ParkPort build() {
      try {
        ParkPort record = new ParkPort();
        record.longitude = fieldSetFlags()[0] ? this.longitude : (java.lang.Double) defaultValue(fields()[0]);
        record.latitude = fieldSetFlags()[1] ? this.latitude : (java.lang.Double) defaultValue(fields()[1]);
        record.parkPortId = fieldSetFlags()[2] ? this.parkPortId : (java.lang.Integer) defaultValue(fields()[2]);
        record.equNum = fieldSetFlags()[3] ? this.equNum : (java.lang.Integer) defaultValue(fields()[3]);
        record.unlockedEquId = fieldSetFlags()[4] ? this.unlockedEquId : (java.lang.Integer) defaultValue(fields()[4]);
        record.lockedEquId = fieldSetFlags()[5] ? this.lockedEquId : (java.lang.Integer) defaultValue(fields()[5]);
        record.disabledEquId = fieldSetFlags()[6] ? this.disabledEquId : (java.lang.Integer) defaultValue(fields()[6]);
        record.equ = fieldSetFlags()[7] ? this.equ : (java.util.List<com.oracle.hackson.webapp.Schema.avrotojava.Equipment>) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ParkPort>
    WRITER$ = (org.apache.avro.io.DatumWriter<ParkPort>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ParkPort>
    READER$ = (org.apache.avro.io.DatumReader<ParkPort>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
